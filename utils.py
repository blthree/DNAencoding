from functools import reduce

complements = str.maketrans({'A': 'T', 'G': 'C', 'C': 'G', 'T': 'A'})

dna_map = {'A': {'C': '0', 'G': '1', 'T': '2'},
           'C': {'G': '0', 'T': '1', 'A': '2'},
           'G': {'T': '0', 'A': '1', 'C': '2'},
           'T': {'A': '0', 'C': '1', 'G': '2'}}

def a2b3(s):
    for ascii_code in s:
        yield huffman[ascii_code]

def int_to_b3(i):
    out = ""
    while i > 0:
        rem = i % 3
        out = str(rem) + out
        i = i // 3
    return out


huffman = {0: '22201', 85: '22200', 170: '22122', 127: '22121', 253: '22120', 52: '22112', 138: '22111', 41: "22110",
           86: '22102', 42: '22101', 100: '22100', 44: '22022', 250: '22020', 132: '22021', 161: '22012', 98: '22010',
           8: '22002', 34: '22011', 10: '22001', 149: '22000', 87: '21222', 21: '21221', 74: '21220', 36: '21212',
           69: '21210', 177: '21202', 20: '21211', 213: '21200', 163: '21201', 229: '21121', 255: '21122', 197: '21120',
           133: '21112', 252: '21110', 26: '21111', 173: '21101', 151: '21102', 82: '21100', 75: '21022', 37: '21021',
           166: '21011', 191: '21020', 88: '21012', 63: '21010', 68: '21001', 150: '21002', 76: '21000', 4: '20222',
           154: '20221', 234: '20212', 22: '20220', 162: '20211', 105: '20210', 102: '20202', 171: '20201',
           104: '20200', 169: '20122', 196: '20121', 208: '20120', 84: '20112', 130: '20111', 146: '20102', 72: '20110',
           16: '20101', 66: '20100', 24: '20022', 106: '20012', 223: '20020', 58: '20021', 137: '20011', 73: '20010',
           101: '20001', 168: '20002', 181: '12221', 175: '12222', 251: '20000', 40: '12220', 140: '12212', 17: '12211',
           83: '12210', 254: '12202', 240: '12201', 214: '12200', 53: '12122', 202: '12112', 25: '12121', 18: '12120',
           247: '12111', 174: '12110', 112: '12102', 89: '12101', 210: '12100', 217: '12012', 248: '12020',
           194: '12021', 182: '12022', 80: '12011', 79: '12002', 195: '12010', 12: '12001', 209: '12000', 165: '11222',
           245: '11221', 2: '11220', 81: '11212', 38: '11211', 141: '11202', 211: '11210', 239: '11200', 95: '11201',
           43: '11122', 224: '11121', 203: '11112', 145: '11120', 147: '11110', 19: '11111', 50: '11101', 136: '11102',
           107: '11100', 134: '11022', 109: '11021', 153: '11020', 148: '11002', 205: '11010', 212: '11011',
           54: '11012', 241: '11000', 156: '11001', 115: '10222', 116: '10221', 78: '10220', 67: '10211', 70: '10212',
           178: '10210', 159: '10202', 142: '10201', 92: '10200', 48: '10122', 90: '10120', 218: '10121', 126: '10112',
           39: '10111', 219: '10102', 167: '10110', 114: '10101', 172: '10022', 14: '10100', 120: '10020', 139: '10021',
           160: '10012', 33: '10011', 179: '10010', 117: '10002', 225: '10001', 129: '10000', 183: '02222',
           230: '02220', 35: '02221', 93: '02210', 6: '02211', 32: '02212', 56: '02201', 158: '02202', 185: '02121',
           47: '02122', 143: '02200', 123: '02111', 204: '02120', 242: '02112', 111: '02110', 103: '02102',
           108: '02101', 9: '02100', 65: '02022', 249: '02020', 13: '02021', 180: '02012', 226: '02001', 144: '02002',
           15: '02010', 57: '02011', 128: '02000', 135: '01220', 243: '01221', 190: '01222', 207: '01212', 77: '01211',
           45: '01210', 91: '01202', 192: '01201', 186: '01122', 216: '01200', 97: '01112', 118: '01120', 246: '01121',
           215: '01111', 51: '01102', 206: '01110', 184: '01100', 227: '01101', 233: '01022', 237: '01021',
           188: '01020', 113: '01012', 49: '01011', 201: '01010', 155: '01002', 222: '01000', 231: '01001', 5: '00222',
           27: '00221', 131: '00212', 164: '00220', 3: '00211', 46: '00210', 119: '00201', 28: '00202', 176: '00200',
           23: '00122', 64: '00121', 157: '00120', 187: '00112', 244: '00110', 238: '00111', 96: '00102', 235: '00101',
           60: '00022', 1: '00100', 110: '00021', 200: '00011', 221: '00020', 99: '00012', 31: '00010', 198: '00002',
           193: '00001', 125: '00000', 124: '222222', 152: '222221', 122: '222220', 71: '222212', 94: '222211',
           220: '222210', 29: '222202', 199: '222201', 61: '222200', 11: '222122', 228: '222121', 62: '222120',
           55: '222112', 121: '222111', 7: '222110', 30: '222102', 232: '222101', 189: '222100', 59: '222021',
           236: '222022'}

huffman_decode = {'22201': 0, '22200': 85, '22122': 170, '22121': 127, '22120': 253, '22112': 52, '22111': 138, '22110': 41, '22102': 86, '22101': 42, '22100': 100, '22022': 44, '22020': 250, '22021': 132, '22012': 161, '22010': 98, '22002': 8, '22011': 34, '22001': 10, '22000': 149, '21222': 87, '21221': 21, '21220': 74, '21212': 36, '21210': 69, '21202': 177, '21211': 20, '21200': 213, '21201': 163, '21121': 229, '21122': 255, '21120': 197, '21112': 133, '21110': 252, '21111': 26, '21101': 173, '21102': 151, '21100': 82, '21022': 75, '21021': 37, '21011': 166, '21020': 191, '21012': 88, '21010': 63, '21001': 68, '21002': 150, '21000': 76, '20222': 4, '20221': 154, '20212': 234, '20220': 22, '20211': 162, '20210': 105, '20202': 102, '20201': 171, '20200': 104, '20122': 169, '20121': 196, '20120': 208, '20112': 84, '20111': 130, '20102': 146, '20110': 72, '20101': 16, '20100': 66, '20022': 24, '20012': 106, '20020': 223, '20021': 58, '20011': 137, '20010': 73, '20001': 101, '20002': 168, '12221': 181, '12222': 175, '20000': 251, '12220': 40, '12212': 140, '12211': 17, '12210': 83, '12202': 254, '12201': 240, '12200': 214, '12122': 53, '12112': 202, '12121': 25, '12120': 18, '12111': 247, '12110': 174, '12102': 112, '12101': 89, '12100': 210, '12012': 217, '12020': 248, '12021': 194, '12022': 182, '12011': 80, '12002': 79, '12010': 195, '12001': 12, '12000': 209, '11222': 165, '11221': 245, '11220': 2, '11212': 81, '11211': 38, '11202': 141, '11210': 211, '11200': 239, '11201': 95, '11122': 43, '11121': 224, '11112': 203, '11120': 145, '11110': 147, '11111': 19, '11101': 50, '11102': 136, '11100': 107, '11022': 134, '11021': 109, '11020': 153, '11002': 148, '11010': 205, '11011': 212, '11012': 54, '11000': 241, '11001': 156, '10222': 115, '10221': 116, '10220': 78, '10211': 67, '10212': 70, '10210': 178, '10202': 159, '10201': 142, '10200': 92, '10122': 48, '10120': 90, '10121': 218, '10112': 126, '10111': 39, '10102': 219, '10110': 167, '10101': 114, '10022': 172, '10100': 14, '10020': 120, '10021': 139, '10012': 160, '10011': 33, '10010': 179, '10002': 117, '10001': 225, '10000': 129, '02222': 183, '02220': 230, '02221': 35, '02210': 93, '02211': 6, '02212': 32, '02201': 56, '02202': 158, '02121': 185, '02122': 47, '02200': 143, '02111': 123, '02120': 204, '02112': 242, '02110': 111, '02102': 103, '02101': 108, '02100': 9, '02022': 65, '02020': 249, '02021': 13, '02012': 180, '02001': 226, '02002': 144, '02010': 15, '02011': 57, '02000': 128, '01220': 135, '01221': 243, '01222': 190, '01212': 207, '01211': 77, '01210': 45, '01202': 91, '01201': 192, '01122': 186, '01200': 216, '01112': 97, '01120': 118, '01121': 246, '01111': 215, '01102': 51, '01110': 206, '01100': 184, '01101': 227, '01022': 233, '01021': 237, '01020': 188, '01012': 113, '01011': 49, '01010': 201, '01002': 155, '01000': 222, '01001': 231, '00222': 5, '00221': 27, '00212': 131, '00220': 164, '00211': 3, '00210': 46, '00201': 119, '00202': 28, '00200': 176, '00122': 23, '00121': 64, '00120': 157, '00112': 187, '00110': 244, '00111': 238, '00102': 96, '00101': 235, '00022': 60, '00100': 1, '00021': 110, '00011': 200, '00020': 221, '00012': 99, '00010': 31, '00002': 198, '00001': 193, '00000': 125, '222222': 124, '222221': 152, '222220': 122, '222212': 71, '222211': 94, '222210': 220, '222202': 29, '222201': 199, '222200': 61, '222122': 11, '222121': 228, '222120': 62, '222112': 55, '222111': 121, '222110': 7, '222102': 30, '222101': 232, '222100': 189, '222021': 59, '222022': 236}

def load_huffman_code():
    with open("View_huff3.cd.new.correct.txt", "rb") as f:
        byte_base3 = dict()
        for line in f.readlines():
            line = line.split(b'\t')
            letter = line[1]
            byte = int(line[2])
            base3 = bytes.decode(line[3])
            byte_base3[byte] = base3
        return byte_base3

def b3_to_dna(str_to_encode, prev_char=None):
    dna_map = {'A': {'0': 'C', '1': 'G', '2': 'T'},
               'C': {'0': 'G', '1': 'T', '2': 'A'},
               'G': {'0': 'T', '1': 'A', '2': 'C'},
               'T': {'0': 'A', '1': 'C', '2': 'G'}}
    dna_out = ""
    for i in range(len(str_to_encode)):
        if not prev_char:
            prev_char = 'A'
        cur_char = dna_map[prev_char][str_to_encode[i]]
        dna_out += cur_char
        prev_char = cur_char

    return dna_out


def add_zeros(b3_str, mod_num=25):
    b3_str_len = len(b3_str)
    b3_len_enc = int_to_b3(b3_str_len)
    b3_len_enc = "0" * (20 - len(b3_len_enc)) + b3_len_enc
    zeros_to_add = ((((b3_str_len + len(b3_len_enc)) // mod_num) + 1) * mod_num - (b3_str_len + len(b3_len_enc)))
    str_to_encode = b3_str + "0" * zeros_to_add + b3_len_enc
    assert (len(str_to_encode) % mod_num) == 0
    return str_to_encode

def chunk_str(s, max_len=100, o=25):
    """
    chunks a string into a list of strings of at most max_len
        with an overlap of o letters
    :param s: string to split
    :param max_len: length of each string
    :param o: overlap between chunks
    :return: list of strings
    """
    start = 0
    end = max_len
    out = list()
    while start <= len(s)-max_len:
        out.append(s[start:start+end])
        start += o
    return out

def rev_comp(dna):
    complements = {'A': 'T', 'G': 'C', 'C': 'G', 'T': 'A'}
    dna_out = ""
    for l in dna[::-1]:
        dna_out += complements[l]
    return dna_out

def rev_comp2(dna):
    return dna.translate(complements)[::-1]

def generate_parity_trit(dna, i, ID):
    i3 = int_to_b3(i)
    i3 = "0"*(12-len(i3)) + i3
    temp = ID + i3
    even_trits = [int(temp[x]) for x in range(len(temp)) if x % 2 == 0]
    parity_trit = sum(even_trits) % 3
    index = ID + i3 + str(parity_trit)
    return index